# -*- coding: utf-8 -*-
"""23101379_Tahmid_19_CSE422_Assignment02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13m_9309G3OGcuHI7DRoh7Z_D7ieIqjbE
"""

import random

initial_cap=1000
historical_price=[1.2, 3.4, -0.8, 2.1, -2.5, 1.7, -0.3, 5.8, -1.1, 3.5]
pop_size=4
gen = 10
mutation_rate = 0.05

def create_chromosome():
    return {'stop_loss': round(random.uniform(1,10),1),
            'take_profit': round(random.uniform(1,10),1),
            'trade_size':round(random.uniform(1,10),1)}

def create_population(size):
    return [create_chromosome() for i in range(size)]

def fitness(chromosome):
    cap = initial_cap

    for change in historical_price:

       trade_amount = (cap* chromosome['trade_size']/100)
       if change<= - chromosome['stop_loss']:
        cap -=trade_amount*(chromosome['stop_loss']/100)
       elif change >= chromosome['take_profit']:
        cap += trade_amount*(chromosome['take_profit']/100)
       else:
        cap += trade_amount
    return cap-initial_cap

def chromosome_to_string(chromosome):
    return f"{int(chromosome['stop_loss']*10):02}{int(chromosome['take_profit']*10):02}:{int(chromosome['trade_size']*10):02}"
def string_to_chromosome(string):
    return {
        "stop_loss": int(string[:2]) / 10,
        "take_profit": int(string[2:4]) / 10,
        "trade_size": int(string[4:6]) }

def select_parent(population):
    return random.sample(population,2)

def crossover(par1,par2):
    par1_str = chromosome_to_string(par1)
    par2_str = chromosome_to_string(par2)

    crossover_point = random.choice([2,4])


    child1_str = par1_str[:crossover_point] + par2_str[crossover_point:]
    child2_str = par2_str[:crossover_point] + par1_str[crossover_point:]
    return string_to_chromosome(child1_str),string_to_chromosome(child2_str)

def mutation(chromosome):
    chromosome_str = chromosome_to_string(chromosome)
    if random.random()<mutation_rate:
        mutation_point = random.choice([0,2,4])
        mute_list = list(chromosome_str)
        new = int(mute_list[mutation_point])+random.choice([-1,1])
        new = max(1,min(new,9))
        mute_list[mutation_point] = str(new)
        return string_to_chromosome(''.join(mute_list))
    return chromosome


def next_gen(population):
    population.sort(key=fitness,reverse =True)
    best_chromosome = population[0]
    par1,par2=select_parent(population)
    child1,child2=crossover(par1,par2)
    child1=mutation(child1)
    child2=mutation(child2)
    return [best_chromosome, child1, child2] + random.sample(population, 1)

def genetic_algorithm(gen):
    population= create_population(pop_size)

    for g in range(gen):
        population = next_gen(population)
        best_chromosome = max(population,key=fitness)
        best_profit = fitness(best_chromosome)

        print(f"Generation {g+1}: Best Chromosome = {best_chromosome}, Profit = {best_profit:.2f}")
    return best_chromosome,best_profit

best_chromosome, final_profit = genetic_algorithm(gen)
print(f"Final Best Chromosome = {best_chromosome}, Profit = {final_profit:.2f}")

#part2
def two_point_crossover(parent1, parent2):
    length = len(parent1)


    point1, point2 = sorted(random.sample(range(1, length), 2))


    child1 = parent1[:point1] + parent2[point1:point2] + parent1[point2:]
    child2 = parent2[:point1] + parent1[point1:point2] + parent2[point2:]

    return child1, child2, point1, point2


parent1 = "000111000"
parent2 = "111000111"

child1, child2, point1, point2 = two_point_crossover(parent1, parent2)

print(f"Parent 1: {parent1}")
print(f"Parent 2: {parent2}")
print(f"Crossover points: {point1}, {point2}")
print(f"Child 1: {child1}")
print(f"Child 2: {child2}")