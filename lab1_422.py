# -*- coding: utf-8 -*-
"""23101379_Tahmid_19_CSE422_Assignment01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13fve0SzkHf-_HnUUonTfSxj3AaDlkq5J
"""

import heapq

class node:
    def __init__(self,name,g=0,h=0,parent=None):
        self.name = name
        self.g = g
        self.h = h
        self.f = g+h
        self.parent = parent
    def __lt__ (self,other):
        return self.f < other.f

def g_path(file_path ):
        graph = {}
        heuristics = {}

        with open(file_path,"r") as file:

            for line in file:
                data = line.strip().split()
                city = data[0]
                heuristic = int(data[1])
                heuristics[city] = heuristic
                graph[city] = {}

                for i in range(2,len(data),2):
                    neighbor = data[i]
                    distance = int(data[i+1])
                    graph[city][neighbor] = distance
        return graph,heuristics

def a_star(graph,heuristics,start,goal):
        open_list = []
        closed_list = set()
        start_node = node(start,g=0,h=heuristics[start])
        heapq.heappush(open_list,start_node)

        while open_list:
            current_node = heapq.heappop(open_list)

            if current_node.name == goal:
                path = []
                total_distance = current_node.g
                while current_node:
                    path.append(current_node.name)
                    current_node = current_node.parent
                return path[::-1],total_distance

            closed_list.add(current_node.name)

            for neighbor,distance in graph[current_node.name].items():
                if neighbor in closed_list:
                    continue

                g = current_node.g + distance
                h = heuristics.get(neighbor,0)
                neighbor_node = node(neighbor,g,h,parent=current_node)

                if any(n.name == neighbor and n.f <= neighbor_node.f for n in open_list):
                   continue

                heapq.heappush(open_list,neighbor_node)
        return None,None


graph , heuristics =g_path("/content/input_file.txt")
start = input("Enter the start city: ").strip()
goal = input("Enter destination city: ").strip()
path, total_distance = a_star(graph,heuristics,start,goal)

if path:
    print(f"path: {'->'.join(path)}")
    print(f"total_distance: {total_distance} km")
else:
    print("No path found")